<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:property-placeholder
		location="classpath:datasource.properties" />
	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- #6.1 datasource빈 등록 -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName"
			value="${datasource.driverClassName}" />
		<property name="url" value="${datasource.url}" />
		<property name="username" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
	</bean>
	<!-- #6.2 mybatis SqlSessionFactoryBean, SqlSessionTemplate 빈 등록 -->
	<bean id="sqlSessionFactoryBean"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations"
			value="classpath*:mapper/**/*-mapper.xml" />
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
	</bean>

	<!-- SqlSession 인터페이스 구현체. Dao 구현클래스에 DI되어 실행됨 -->
	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean" index="0" />
	</bean>

	<!-- #6.3 @Mapper 인터페이스 등록 : Dao 구현객체를 동적으로 생성 -->
	<mybatis-spring:scan base-package="com.kh.**.dao" />

	<!-- #11.1 트랜잭션 매니저 빈 등록 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- @Transactional 어노테이션에 Transaction Advice 적용 -->
	<tx:annotation-driven
		transaction-manager="transactionManager" />

	<!-- #승원 3. multipath Resolver -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600" />
		<property name="maxInMemorySize" value="102400" />
		<property name="defaultEncoding" value="utf-8" />
	</bean>

	<!-- 메일인증 관련 -->
	<!-- navermail설정 -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> 
     <property name="host" value="smtp.naver.com"/> <!-- 메이서버 호스트 -->
     <property name="port" value="465"/> <!-- 메이서버 포트번호 -->
     <property name="username" value="kei01105@naver.com"/> <!-- 자신의 이메일 아이디 -> 보내는사람 이메일임 -->
     <property name="password" value="gksgotjr4417"/> <!-- 자신의 비밀번호 -->
       <!-- 보안연결 SSL과 관련된 설정 -->
     <property name="javaMailProperties">
      <props>
      <prop key="mail.smtp.auth">true</prop>
      <prop key="mail.smtp.starttls.enable">true</prop>
      <prop key="mail.smtps.checkserveridentity">true</prop>
      <prop key="mail.smtps.ssl.trust">*</prop>
      <prop key="mail.debug">true</prop>
      <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
      <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
      </props>
     </property>
    </bean>


</beans>
